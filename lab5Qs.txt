1. An integer
2. Hash codes are used to index into list using the modulus operator. The remainder of a positive or negative number of a hash code and the length of the hash list will always be some positive number within 0 and length minus 1 of the hash list.
3. Using the hash method __contains__. You would traverse the hash list by using the aformentioned method to get to the right index of the item. If the item you're looking for is located at that particular index, then you return True. other wise you increment through the list by doing idx = (idx + 1) % len(self.items) until the item is ultimately found or you're at the end of a chain, and there is a None value to which you return False.
4. Collision resolution is important because some items that are hashed may result in the same exact hash values meaning that they would go in the same exact spot in the hash list. A common way to do this is to move the index over to the next available spot or used linked lists to chain down off of a single index.
5. Sets are a collection of objects,but can be mapped to eachother. They are almost analogous to spaces and subspaces in the mathmatetical sense. Maps are strictly like dictionaries which make associations between particular keys and their values. 
7. If a set has a very small load factor, that means there is a lot of empty values in a set. Iterating through a set of thousands of items might take a while, so by reducing the size of the set (i.e getting rid of the extra none values) less items have to be traversed in order to find the value.
8. Rehashing is the optimizing of a hash table based on the load factor. Rehashing often occurs when the load factor is above .75 or below .25 This collission handling strategy is effective for problems in which data is very large (or growing) very small (or decreasing).